<cpp include="<stdint.h>">
<cpp namespace="my::custom::ns">

type kind = [
  | Root (* class name conflict *)
  | Thing of int
  | WOW <json name="wow">
  | Amaze <json name="!!!"> of string list
]

type frozen = [
  | A
  | B of int
]

type enum_sumtype = [
  | A
  | B
  | C
] <cpp repr="enum">

type ('a, 'b) parametrized_record = {
  field_a: 'a;
  ~field_b: 'b list;
}

type 'a parametrized_tuple = ('a * 'a * int)

type root = {
  id <json name="ID">: string;
  await: bool;
  integer: int;
  __init__ : float;
  ~float_with_auto_default: float;
  ~float_with_default <cpp default="0.1f">: float;
  items: int list list;
  ?maybe: int option;
  ~extras: int list;
  ~answer <cpp default="42">: int;
  aliased: alias;
  point: (float * float);
  kind: kind;
  kinds: kind list;
  assoc1: (float * int) list;
  assoc2: (string * int) list <json repr="object">;
  assoc3: (float * int) list <cpp repr="dict">;
  assoc4: (string * int) list <json repr="object"> <cpp repr="dict">;
  nullables: int nullable list;
  options: int option list;
  untyped_things: abstract list;
  parametrized_record: (int, float) parametrized_record;
  parametrized_tuple: kind parametrized_tuple;
  wrapped: st wrap <cpp t="uint16_t" wrap="[](typedefs::St st){return st - 1;}" unwrap="[](uint16_t e){return e + 1;}">;
  aaa: alias_of_alias_of_alias;
  item: string wrap <cpp t="int" wrap="std::stoi" unwrap="std::to_string">;
  ee : enum_sumtype;
}  


type st = int
type alias = int list
type alias2 = int list
type alias3 = int wrap <cpp t="uint32_t" wrap="static_cast<uint32_t>" unwrap="static_cast<int>">
type alias_of_alias = alias3 wrap <cpp t="uint16_t" wrap="static_cast<uint16_t>" unwrap="static_cast<uint32_t>">
type alias_of_alias_not_Wrapped = alias3
type alias_of_alias_of_alias = alias_of_alias_not_Wrapped

type password = int wrap <cpp t="uint32_t" wrap="static_cast<uint32_t>" unwrap="static_cast<int>">


type credential = {
  name: string;
  password: int;
}

type credentials = {
  credentials: credential list;
}

type credentials2 = credential list

type three_level_nested_list_record = {
  field_a: int list list list
}


type pair = (string * int)

type require_field = {
  req: string;
}

type recursive_class = {
  id: int;
  flag: bool;
  children: recursive_class list;
}

type default_list = {
  ~items: int list;
}

type record_with_wrapped_type = {
  item: string wrap <cpp t="int" wrap="std::stoi" unwrap="std::to_string">;
}

type 'a recursive = 'a list

(* This only works if the recursive member is always present. If it can optionally not be present, we need extra wrapping in an optional as below *)
type recursive_variant = [
  | Integer of int
  | Rec of recursive_variant wrap <cpp templatize t="std::shared_ptr" wrap="_atd_wrap_shared_ptr" unwrap="_atd_unwrap_shared_ptr">
]

type struct_with_recursive_variant = {
  variant: recursive_variant;
}

type recursive_record2 = {
  id: int;
  flag: bool;
  children: recursive_record2 nullable wrap <cpp templatize t="std::shared_ptr" wrap="_atd_wrap_shared_ptr" unwrap="_atd_unwrap_shared_ptr">;
}

type null_opt = {
  a : int;
  b : int option;
  c : int nullable;
  ?f : int option;
  ~h <cpp default="3"> :int option;
  ~i <cpp default="3"> : int nullable;
}

type empty_record = {
}