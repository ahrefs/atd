
// Generated by atdcpp from type definitions in everything.atd.
// This implements classes for the types defined in 'everything.atd', providing
// methods and functions to convert data from/to JSON.

// ############################################################################

#pragma once

#include <stdexcept>
#include <string>
#include <rapidjson/document.h>
#include <rapidjson/writer.h>
#include <rapidjson/stringbuffer.h>
#include <iostream>
#include <stdexcept>
#include <vector>
#include <string>
#include <map>




#include <stdint.h>


namespace atd {


namespace RecursiveVariant::Types {
    struct A;
    struct B;
}
namespace typedefs {
    typedef std::variant<atd::RecursiveVariant::Types::A, atd::RecursiveVariant::Types::B> RecursiveVariant;
}
namespace RecursiveVariant::Types {
    // Original type: recursive_variant = [ ... | A | ... ]
    struct A {
        static void to_json(const A &e, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    };
    // Original type: recursive_variant = [ ... | B of ... | ... ]
    struct B
    {
        std::vector<typedefs::RecursiveVariant> value;
        static void to_json(const B &e, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    };
}
namespace RecursiveVariant {
    static atd::typedefs::RecursiveVariant from_json(const rapidjson::Value &x);
    static atd::typedefs::RecursiveVariant from_json_string(const std::string &s);
    static void to_json(const atd::typedefs::RecursiveVariant &x, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const atd::typedefs::RecursiveVariant &x);
}


struct RecursiveClass;
namespace typedefs {
    typedef RecursiveClass RecursiveClass;
}
struct RecursiveClass {
    int id;
    bool flag;
    std::vector<typedefs::RecursiveClass> children;

    static RecursiveClass from_json(const rapidjson::Value & doc);
    static RecursiveClass from_json_string(const std::string &s);
    static void to_json(const RecursiveClass &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    static std::string to_json_string(const RecursiveClass &t);
    std::string to_json_string();
};


struct ThreeLevelNestedListRecord;
namespace typedefs {
    typedef ThreeLevelNestedListRecord ThreeLevelNestedListRecord;
}
struct ThreeLevelNestedListRecord {
    std::vector<std::vector<std::vector<int>>> field_a;

    static ThreeLevelNestedListRecord from_json(const rapidjson::Value & doc);
    static ThreeLevelNestedListRecord from_json_string(const std::string &s);
    static void to_json(const ThreeLevelNestedListRecord &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    static std::string to_json_string(const ThreeLevelNestedListRecord &t);
    std::string to_json_string();
};


namespace typedefs {
    typedef int St;
}
namespace St {
    typedefs::St from_json(const rapidjson::Value &doc);
    static typedefs::St from_json_string(const std::string &s);
    void to_json(const typedefs::St &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::St &t);
}


namespace Kind::Types {
    struct Root;
    struct Thing;
    struct WOW;
    struct Amaze;
}
namespace typedefs {
    typedef std::variant<atd::Kind::Types::Root, atd::Kind::Types::Thing, atd::Kind::Types::WOW, atd::Kind::Types::Amaze> Kind;
}
namespace Kind::Types {
    // Original type: kind = [ ... | Root | ... ]
    struct Root {
        static void to_json(const Root &e, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    };
    // Original type: kind = [ ... | Thing of ... | ... ]
    struct Thing
    {
        int value;
        static void to_json(const Thing &e, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    };
    // Original type: kind = [ ... | WOW | ... ]
    struct WOW {
        static void to_json(const WOW &e, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    };
    // Original type: kind = [ ... | Amaze of ... | ... ]
    struct Amaze
    {
        std::vector<std::string> value;
        static void to_json(const Amaze &e, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    };
}
namespace Kind {
    static atd::typedefs::Kind from_json(const rapidjson::Value &x);
    static atd::typedefs::Kind from_json_string(const std::string &s);
    static void to_json(const atd::typedefs::Kind &x, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const atd::typedefs::Kind &x);
}


namespace typedefs {
    typedef uint32_t Alias3;
}
namespace Alias3 {
    typedefs::Alias3 from_json(const rapidjson::Value &doc);
    static typedefs::Alias3 from_json_string(const std::string &s);
    void to_json(const typedefs::Alias3 &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::Alias3 &t);
}


namespace typedefs {
    typedef typedefs::Alias3 AliasOfAliasNotWrapped;
}
namespace AliasOfAliasNotWrapped {
    typedefs::AliasOfAliasNotWrapped from_json(const rapidjson::Value &doc);
    static typedefs::AliasOfAliasNotWrapped from_json_string(const std::string &s);
    void to_json(const typedefs::AliasOfAliasNotWrapped &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::AliasOfAliasNotWrapped &t);
}


namespace typedefs {
    typedef typedefs::AliasOfAliasNotWrapped AliasOfAliasOfAlias;
}
namespace AliasOfAliasOfAlias {
    typedefs::AliasOfAliasOfAlias from_json(const rapidjson::Value &doc);
    static typedefs::AliasOfAliasOfAlias from_json_string(const std::string &s);
    void to_json(const typedefs::AliasOfAliasOfAlias &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::AliasOfAliasOfAlias &t);
}


namespace typedefs {
    typedef std::vector<int> Alias;
}
namespace Alias {
    typedefs::Alias from_json(const rapidjson::Value &doc);
    static typedefs::Alias from_json_string(const std::string &s);
    void to_json(const typedefs::Alias &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::Alias &t);
}


namespace typedefs {
    typedef std::tuple<typedefs::Kind, typedefs::Kind, int> KindParametrizedTuple;
}
namespace KindParametrizedTuple {
    typedefs::KindParametrizedTuple from_json(const rapidjson::Value &doc);
    static typedefs::KindParametrizedTuple from_json_string(const std::string &s);
    void to_json(const typedefs::KindParametrizedTuple &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::KindParametrizedTuple &t);
}


struct IntFloatParametrizedRecord;
namespace typedefs {
    typedef IntFloatParametrizedRecord IntFloatParametrizedRecord;
}
struct IntFloatParametrizedRecord {
    int field_a;
    std::vector<float> field_b = {};

    static IntFloatParametrizedRecord from_json(const rapidjson::Value & doc);
    static IntFloatParametrizedRecord from_json_string(const std::string &s);
    static void to_json(const IntFloatParametrizedRecord &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    static std::string to_json_string(const IntFloatParametrizedRecord &t);
    std::string to_json_string();
};


struct Root;
namespace typedefs {
    typedef Root Root;
}
struct Root {
    std::string id;
    bool await;
    int integer;
    float x___init__;
    float float_with_auto_default = 0.0;
    float float_with_default = 0.1;
    std::vector<std::vector<int>> items;
    std::optional<int> maybe;
    std::vector<int> extras = {};
    int answer = 42;
    typedefs::Alias aliased;
    std::tuple<float, float> point;
    typedefs::Kind kind;
    std::vector<typedefs::Kind> kinds;
    std::vector<std::tuple<float, int>> assoc1;
    std::vector<std::tuple<std::string, int>> assoc2;
    std::map<float, int> assoc3;
    std::map<std::string, int> assoc4;
    std::vector<std::optional<int>> nullables;
    std::vector<std::optional<int>> options;
    typedefs::IntFloatParametrizedRecord parametrized_record;
    typedefs::KindParametrizedTuple parametrized_tuple;
    uint16_t wrapped;
    typedefs::AliasOfAliasOfAlias aaa;
    int item;

    static Root from_json(const rapidjson::Value & doc);
    static Root from_json_string(const std::string &s);
    static void to_json(const Root &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    static std::string to_json_string(const Root &t);
    std::string to_json_string();
};


struct RequireField;
namespace typedefs {
    typedef RequireField RequireField;
}
struct RequireField {
    std::string req;

    static RequireField from_json(const rapidjson::Value & doc);
    static RequireField from_json_string(const std::string &s);
    static void to_json(const RequireField &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    static std::string to_json_string(const RequireField &t);
    std::string to_json_string();
};


struct RecordWithWrappedType;
namespace typedefs {
    typedef RecordWithWrappedType RecordWithWrappedType;
}
struct RecordWithWrappedType {
    int item;

    static RecordWithWrappedType from_json(const rapidjson::Value & doc);
    static RecordWithWrappedType from_json_string(const std::string &s);
    static void to_json(const RecordWithWrappedType &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    static std::string to_json_string(const RecordWithWrappedType &t);
    std::string to_json_string();
};


namespace typedefs {
    typedef uint32_t Password;
}
namespace Password {
    typedefs::Password from_json(const rapidjson::Value &doc);
    static typedefs::Password from_json_string(const std::string &s);
    void to_json(const typedefs::Password &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::Password &t);
}


namespace typedefs {
    typedef std::tuple<std::string, int> Pair;
}
namespace Pair {
    typedefs::Pair from_json(const rapidjson::Value &doc);
    static typedefs::Pair from_json_string(const std::string &s);
    void to_json(const typedefs::Pair &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::Pair &t);
}


namespace Frozen::Types {
    struct A;
    struct B;
}
namespace typedefs {
    typedef std::variant<atd::Frozen::Types::A, atd::Frozen::Types::B> Frozen;
}
namespace Frozen::Types {
    // Original type: frozen = [ ... | A | ... ]
    struct A {
        static void to_json(const A &e, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    };
    // Original type: frozen = [ ... | B of ... | ... ]
    struct B
    {
        int value;
        static void to_json(const B &e, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    };
}
namespace Frozen {
    static atd::typedefs::Frozen from_json(const rapidjson::Value &x);
    static atd::typedefs::Frozen from_json_string(const std::string &s);
    static void to_json(const atd::typedefs::Frozen &x, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const atd::typedefs::Frozen &x);
}


struct DefaultList;
namespace typedefs {
    typedef DefaultList DefaultList;
}
struct DefaultList {
    std::vector<int> items = {};

    static DefaultList from_json(const rapidjson::Value & doc);
    static DefaultList from_json_string(const std::string &s);
    static void to_json(const DefaultList &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    static std::string to_json_string(const DefaultList &t);
    std::string to_json_string();
};


struct Credential;
namespace typedefs {
    typedef Credential Credential;
}
struct Credential {
    std::string name;
    int password;

    static Credential from_json(const rapidjson::Value & doc);
    static Credential from_json_string(const std::string &s);
    static void to_json(const Credential &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    static std::string to_json_string(const Credential &t);
    std::string to_json_string();
};


namespace typedefs {
    typedef std::vector<typedefs::Credential> Credentials2;
}
namespace Credentials2 {
    typedefs::Credentials2 from_json(const rapidjson::Value &doc);
    static typedefs::Credentials2 from_json_string(const std::string &s);
    void to_json(const typedefs::Credentials2 &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::Credentials2 &t);
}


struct Credentials;
namespace typedefs {
    typedef Credentials Credentials;
}
struct Credentials {
    std::vector<typedefs::Credential> credentials;

    static Credentials from_json(const rapidjson::Value & doc);
    static Credentials from_json_string(const std::string &s);
    static void to_json(const Credentials &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    static std::string to_json_string(const Credentials &t);
    std::string to_json_string();
};


namespace typedefs {
    typedef uint16_t AliasOfAlias;
}
namespace AliasOfAlias {
    typedefs::AliasOfAlias from_json(const rapidjson::Value &doc);
    static typedefs::AliasOfAlias from_json_string(const std::string &s);
    void to_json(const typedefs::AliasOfAlias &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::AliasOfAlias &t);
}


namespace typedefs {
    typedef std::vector<int> Alias2;
}
namespace Alias2 {
    typedefs::Alias2 from_json(const rapidjson::Value &doc);
    static typedefs::Alias2 from_json_string(const std::string &s);
    void to_json(const typedefs::Alias2 &t, rapidjson::Writer<rapidjson::StringBuffer> &writer);
    std::string to_json_string(const typedefs::Alias2 &t);
}


} // namespace atd
