<python text="# This was inserted by the user.">
<python json_py.text="import deco">
<python json_py.text="from dataclasses import dataclass">

import external_defs as ext

(* A list of objects whose type is defined in another ATD module. *)
type uses_external_type = ext.a list

type kind = [
  | Root (* class name conflict *)
  | Thing of int
  | WOW <json name="wow">
  | Amaze <json name="!!!"> of string list
]

type frozen
  <python decorator="dataclass(frozen=True)"> = [
  | A
  | B of int
]

type ('a, 'b) parametrized_record = {
  field_a: 'a;
  ~field_b: 'b list;
}

type 'a parametrized_tuple = ('a * 'a * int)

type root = {
  id <json name="ID">: string;
  await: bool;
  __init__: float;
  items: int list list;
  ?maybe: int option;
  ~extras: int list;
  ~answer <python default="42">: int;
  aliased: alias;
  point: (float * float);
  kinds: kind list;
  assoc1: (float * int) list;
  assoc2: (string * int) list <json repr="object">;
  assoc3: (float * int) list <python repr="dict">;
  assoc4: (string * int) list <json repr="object"> <python repr="dict">;
  nullables: int nullable list;
  options: int option list;
  untyped_things: abstract list;
  parametrized_record: (int, float) parametrized_record;
  parametrized_tuple: kind parametrized_tuple;
}

type alias = int list

type pair = (string * int)

type require_field <python decorator="deco.deco1"
                           decorator="deco.deco2(42)"
                           decorator="dataclass(order=True)"> = {
  req: string;
}

type recursive_class = {
  id: int;
  flag: bool;
  children: recursive_class list;
}
