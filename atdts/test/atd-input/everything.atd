(*
   ATD type definitions for testing their translation to TypeScript.
*)

(* Testing raw JSON. Should map to type 'any'. *)
type anything = abstract

type different_kinds_of_things = [
  | Root (* class name conflict *)
  | Thing of int
  | WOW <json name="wow">
  | Amaze <json name="!!!"> of string list
]

(* TS keyword *)
type this = int

type ('a, 'b) parametrized_record = {
  field_a: 'a;
  ~field_b: 'b list;
}

type 'a parametrized_tuple = ('a * 'a * int)

type simple_record = {
  str: string;
}

type root = {
  id <json name="ID">: string;
  this: this;
  items: int list list;
  ?maybe: int option;
  ?maybe2: simple_record option;
  ~extras: int list;
  ~answer <ts default="42">: int;
  aliased: alias;
  point: (float * float);
  kinds: different_kinds_of_things list;
  assoc1: (float * int) list;
  assoc2: (string * int) list <json repr="object">;
  assoc3: (float * int) list <ts repr="map">;
  assoc4: (string * int) list <json repr="object"> <ts repr="map">;
  ~options: int option list;
  ~nullables: int nullable list;
  untyped_things: abstract list;
  foo: foo nullable;
  parametrized_record: (int, float) parametrized_record;
  parametrized_tuple: different_kinds_of_things parametrized_tuple;
  anything: anything;
  wrapped: string wrap list;
}

type alias = int list

type pair = (string * int)

type foo = {
  foo: string;
}

type special_string = string wrap
